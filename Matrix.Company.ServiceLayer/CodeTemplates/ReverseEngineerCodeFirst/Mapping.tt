<#
// Simplifying assumptions based on reverse engineer rules
//  - No complex types
//  - One entity container
//  - No inheritance
//  - Always have two navigation properties
//  - All associations expose FKs (except many:many)
#>
<#@ template hostspecific="true" language="C#" #>
<#@ include file="EF.Utility.CS.ttinclude" #><#@
 output extension=".cs" #><#

    var efHost = (EfTextTemplateHost)Host;
    var code = new CodeGenerationTools(this);
	#>

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Matrix.Company.DomainClasses;
using Matrix.Company.DataLayer;
using Matrix.Company.ServiceLayer.Base;
using Matrix.Company.ServiceLayer.Contracts;

namespace Matrix.Company.ServiceLayer.Contracts//<#= code.EscapeNamespace(efHost.Namespace) #>
{
    public interface I<#= efHost.EntityType.Name #>Service : IServiceBase<<#= efHost.EntityType.Name #>>
    {
       
    }
}
